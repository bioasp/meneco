% inputs from the met_net
% draft(Network).
% reaction(Reaction,Network).
% reactant(Species,Reaction).
% product(Species,Reaction).
% seed(Species).
% target(Species).
% ub(Upperbound).
% lb(Lowerbound).

% find minimal set of xreactions such that xscope contains targets in pscope

% what is producible by the original network

  dscope(M) :- seed(M).

  dscope(M) :- product(M,R,N), reaction(R,N), draft(N),
               dscope(M2) : reactant(M2,R,N).

  dscope(M) :- reactant(M,R,N), reaction(R,N), draft(N), reversible(R),
               dscope(M2) : product(M2,R,N).

% what is producible with all reactions

  pscope(M) :- seed(M).

  pscope(M) :- product(M,R,N), reaction(R,N),
               pscope(M2) : reactant(M2,R,N).

  pscope(M) :- reactant(M,R,N), reaction(R,N), reversible(R),
               pscope(M2) : product(M2,R,N).

% what are the interesting reactions
% ireactions reactions are now defined in ireactions.lp


% repair
% choose interesting reactions to extend the network.
% dont extend with already existing reactions.

  L{ xreaction(R,N) : ireaction(R,N) }U :- ub(U),lb(L).


% operable reactions
% no xreaction if not all reactants in xscope

  oreaction(R,N) :- reaction(R,N), not draft(N), xscope(M) : reactant(M,R,N).
  oreaction(R,N) :- reaction(R,N), reversible(R), not draft(N), xscope(M) : product(M,R,N).

  :- xreaction(R,N), not oreaction(R,N).


% what is producible with the extensions

  xscope(M) :- seed(M).

  xscope(M) :- product(M,R,N), reaction(R,N), draft(N),
               xscope(M2) : reactant(M2,R,N).

  xscope(M) :- reactant(M,R,N), reaction(R,N), draft(N), reversible(R),
               xscope(M2) : product(M2,R,N).

  xscope(M) :- product(M,R,N), xreaction(R,N),
               xscope(M2) : reactant(M2,R,N).

  xscope(M) :- reactant(M,R,N), xreaction(R,N), reversible(R),
               xscope(M2) : product(M2,R,N).               
               

% every target that is potentially producible must be producible with the extension

  :- target(M), pscope(M), not xscope(M).


% optimizations

  ireaction(R) :- ireaction(R,N).
  order(X,X+1) :- ireaction(X).
  hasbigger(X) :- ireaction(X), ireaction(Y), Y>X.
  last(X) :- ireaction(X), not hasbigger(X).

  count(X,1)   :- xreaction(X,N).
  count(Y,C)   :- count(X,C), order(X,Y), ub(UB), C<=UB.
  count(Y,C+1) :- count(X,C), order(X,Y), xreaction(Y,N), ub(UB), C+1<=UB.
  :- count(X,C), order(X,Y), xreaction(Y,N), ub(C).
  #minimize {  count(Y,_)  : last(Y) }.


% prohibit xreactions that produce nothing used by an operable reaction

  opreaction(R,N) :- reaction(R,N), xscope(M) : reactant(M,R,N).
  opreaction(R,N) :- reaction(R,N),reversible(R), xscope(M) : product(M,R,N).

  used(M) :- opreaction(R,N), reactant(M,R,N).
  used(M) :- opreaction(R,N), reversible(R), product(M,R,N).
  used(M) :- target(M).
  :- xreaction(R,N), not reversible(R), not used(M) : product(M,R,N).

#show xreaction/2.